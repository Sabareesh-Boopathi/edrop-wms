services:
  backend:
    # This entrypoint calls the script AND passes "postgres" as the first argument.
    entrypoint: ["/usr/local/bin/wait-for-postgres.sh", "postgres"]
    # Run DB migrations before starting the server
    command: ["sh", "-c", "alembic upgrade heads && uvicorn main:app --host 0.0.0.0 --port 8000 --reload"]
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      # Re-add this volume for live code reloading
      - ./backend:/usr/src/app
      - ./test-reports:/usr/src/app/test-reports
    env_file:
      - ./.env
    environment:
      - PYTHONPATH=/usr/src/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - edrop-net

  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_DATABASE}
      - DB_TEST_DATABASE=${DB_TEST_DATABASE}
    ports:
      - "5432:5432"
    volumes:
      - postgres-db:/var/lib/postgresql/data
      - ./docker/postgres:/docker-entrypoint-initdb.d
    networks:
      - edrop-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_DATABASE}"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  postgres-db:

networks:
  edrop-net:
    driver: bridge