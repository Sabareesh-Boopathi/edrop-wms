"""update_communities_and_replace_rwa_flat_models

Revision ID: 2e0b83e20869
Revises: 0131db1164d3
Create Date: 2025-08-23 17:15:48.003380

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2e0b83e20869'
down_revision: Union[str, Sequence[str], None] = '0131db1164d3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('route_community_association',
    sa.Column('route_id', sa.UUID(), nullable=False),
    sa.Column('community_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['community_id'], ['communities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('route_id', 'community_id')
    )
    
    # Drop foreign key constraints first
    op.drop_constraint('customers_flat_id_fkey', 'customers', type_='foreignkey')
    op.drop_constraint('flats_rwa_id_fkey', 'flats', type_='foreignkey')
    
    # Drop tables and associations in correct order
    op.drop_table('route_rwa_association')
    op.drop_index(op.f('ix_flats_name'), table_name='flats')
    op.drop_table('flats')
    op.drop_index(op.f('ix_rwas_code'), table_name='rwas')
    op.drop_index(op.f('ix_rwas_name'), table_name='rwas')
    op.drop_table('rwas')
    
    # Create enum types before using them
    op.execute("CREATE TYPE community_status_enum AS ENUM ('ACTIVE', 'INACTIVE')")
    
    op.alter_column('audit_logs', 'changes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=False)
    op.drop_index(op.f('ix_audit_logs_actor'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_entity'), table_name='audit_logs')
    op.drop_constraint(op.f('uq_bins_code'), 'bins', type_='unique')
    op.add_column('communities', sa.Column('rwa_name', sa.String(length=255), nullable=True))
    op.add_column('communities', sa.Column('rwa_email', sa.String(length=255), nullable=True))
    op.add_column('communities', sa.Column('fm_email', sa.String(length=255), nullable=True))
    op.add_column('communities', sa.Column('fm_number', sa.String(length=20), nullable=True))
    op.add_column('communities', sa.Column('blocks', sa.Text(), nullable=True))
    op.add_column('communities', sa.Column('community_type', sa.Enum('COMMUNITY', 'INDIVIDUAL', name='residencetype'), nullable=False))
    op.add_column('communities', sa.Column('code', sa.String(length=50), nullable=True))
    op.add_column('communities', sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='community_status_enum'), nullable=False))
    op.add_column('communities', sa.Column('warehouse_id', sa.UUID(), nullable=True))
    op.alter_column('communities', 'latitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=15, scale=10),
               existing_nullable=True)
    op.alter_column('communities', 'longitude',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               type_=sa.Numeric(precision=15, scale=10),
               existing_nullable=True)
    op.drop_constraint(op.f('uq_communities_name'), 'communities', type_='unique')
    op.create_index(op.f('ix_communities_code'), 'communities', ['code'], unique=False)
    op.create_index(op.f('ix_communities_name'), 'communities', ['name'], unique=True)
    op.create_foreign_key(None, 'communities', 'warehouses', ['warehouse_id'], ['id'])
    op.drop_constraint(op.f('uq_crates_name'), 'crates', type_='unique')
    op.alter_column('customers', 'phone_number',
               existing_type=sa.VARCHAR(length=50),
               nullable=True)
    op.alter_column('customers', 'community_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.drop_constraint(op.f('customers_user_id_fkey'), 'customers', type_='foreignkey')
    # customers_flat_id_fkey already dropped above
    op.drop_column('customers', 'flat_number')
    op.drop_column('customers', 'pincode')
    op.drop_column('customers', 'landmark')
    op.drop_column('customers', 'flat_id')
    op.drop_column('customers', 'user_id')
    op.drop_column('customers', 'city')
    op.drop_column('customers', 'longitude')
    op.drop_column('customers', 'address_line1')
    op.drop_column('customers', 'address_line2')
    op.drop_column('customers', 'state')
    op.drop_column('customers', 'residence_type')
    op.drop_column('customers', 'latitude')
    op.drop_column('customers', 'block_tower')
    op.create_index(op.f('ix_dispatch_loading_logs_route_id'), 'dispatch_loading_logs', ['route_id'], unique=False)
    op.alter_column('drivers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('drivers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_inbound_receipt_lines_bin_id'), 'inbound_receipt_lines', ['bin_id'], unique=False)
    op.create_index(op.f('ix_inbound_receipt_lines_receipt_id'), 'inbound_receipt_lines', ['receipt_id'], unique=False)
    op.drop_constraint(op.f('inbound_receipts_code_key'), 'inbound_receipts', type_='unique')
    op.create_index(op.f('ix_inbound_receipts_code'), 'inbound_receipts', ['code'], unique=True)
    op.create_index(op.f('ix_inbound_receipts_vendor_id'), 'inbound_receipts', ['vendor_id'], unique=False)
    op.drop_constraint(op.f('uq_racks_warehouse_name'), 'racks', type_='unique')
    op.create_index(op.f('ix_route_bins_route_id'), 'route_bins', ['route_id'], unique=False)
    op.alter_column('routes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('routes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.create_index(op.f('ix_routes_warehouse_id'), 'routes', ['warehouse_id'], unique=False)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=False)
    op.drop_index(op.f('uq_warehouse_configs_short_code'), table_name='warehouse_configs')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('uq_warehouse_configs_short_code'), 'warehouse_configs', [sa.literal_column("(data ->> 'shortCode'::text)")], unique=True)
    op.alter_column('vehicles', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('vehicles', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_routes_warehouse_id'), table_name='routes')
    op.alter_column('routes', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('routes', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_route_bins_route_id'), table_name='route_bins')
    op.create_unique_constraint(op.f('uq_racks_warehouse_name'), 'racks', ['warehouse_id', 'name'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_inbound_receipts_vendor_id'), table_name='inbound_receipts')
    op.drop_index(op.f('ix_inbound_receipts_code'), table_name='inbound_receipts')
    op.create_unique_constraint(op.f('inbound_receipts_code_key'), 'inbound_receipts', ['code'], postgresql_nulls_not_distinct=False)
    op.drop_index(op.f('ix_inbound_receipt_lines_receipt_id'), table_name='inbound_receipt_lines')
    op.drop_index(op.f('ix_inbound_receipt_lines_bin_id'), table_name='inbound_receipt_lines')
    op.alter_column('drivers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.alter_column('drivers', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               nullable=True)
    op.drop_index(op.f('ix_dispatch_loading_logs_route_id'), table_name='dispatch_loading_logs')
    op.add_column('customers', sa.Column('block_tower', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('residence_type', postgresql.ENUM('COMMUNITY', 'INDIVIDUAL', name='residencetype'), autoincrement=False, nullable=False))
    op.add_column('customers', sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('address_line2', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('address_line1', sa.VARCHAR(length=500), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('customers', sa.Column('flat_id', sa.UUID(), autoincrement=False, nullable=False))
    op.add_column('customers', sa.Column('landmark', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('pincode', sa.VARCHAR(length=20), autoincrement=False, nullable=True))
    op.add_column('customers', sa.Column('flat_number', sa.VARCHAR(length=50), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('customers_flat_id_fkey'), 'customers', 'flats', ['flat_id'], ['id'])
    op.create_foreign_key(op.f('customers_user_id_fkey'), 'customers', 'users', ['user_id'], ['id'])
    op.alter_column('customers', 'community_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('customers', 'phone_number',
               existing_type=sa.VARCHAR(length=50),
               nullable=False)
    op.create_unique_constraint(op.f('uq_crates_name'), 'crates', ['name'], postgresql_nulls_not_distinct=False)
    op.drop_constraint(None, 'communities', type_='foreignkey')
    op.drop_index(op.f('ix_communities_name'), table_name='communities')
    op.drop_index(op.f('ix_communities_code'), table_name='communities')
    op.create_unique_constraint(op.f('uq_communities_name'), 'communities', ['name'], postgresql_nulls_not_distinct=False)
    op.alter_column('communities', 'longitude',
               existing_type=sa.Numeric(precision=15, scale=10),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.alter_column('communities', 'latitude',
               existing_type=sa.Numeric(precision=15, scale=10),
               type_=sa.DOUBLE_PRECISION(precision=53),
               existing_nullable=True)
    op.drop_column('communities', 'warehouse_id')
    op.drop_column('communities', 'status')
    op.drop_column('communities', 'code')
    op.drop_column('communities', 'community_type')
    op.drop_column('communities', 'blocks')
    op.drop_column('communities', 'fm_number')
    op.drop_column('communities', 'fm_email')
    op.drop_column('communities', 'rwa_email')
    op.drop_column('communities', 'rwa_name')
    
    # Drop the enum type
    op.execute("DROP TYPE IF EXISTS community_status_enum")
    
    op.create_unique_constraint(op.f('uq_bins_code'), 'bins', ['code'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('ix_audit_logs_entity'), 'audit_logs', ['entity_type', 'entity_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_actor'), 'audit_logs', ['actor_user_id'], unique=False)
    op.alter_column('audit_logs', 'changes',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=False)
    op.create_table('flats',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('tower_block', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('flat_number', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('rwa_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('address_line', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('building_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=7), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=10, scale=7), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', name='flat_status_enum'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rwa_id'], ['rwas.id'], name=op.f('flats_rwa_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('flats_pkey')),
    sa.UniqueConstraint('flat_number', 'rwa_id', name=op.f('uq_flat_number_rwa_id'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('ix_flats_name'), 'flats', ['name'], unique=False)
    op.create_table('rwas',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('address', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.NUMERIC(precision=10, scale=7), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.NUMERIC(precision=10, scale=7), autoincrement=False, nullable=True),
    sa.Column('code', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('pincode', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('status', postgresql.ENUM('ACTIVE', 'INACTIVE', name='rwa_status_enum'), autoincrement=False, nullable=True),
    sa.Column('warehouse_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['warehouse_id'], ['warehouses.id'], name='rwas_warehouse_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='rwas_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_rwas_name'), 'rwas', ['name'], unique=True)
    op.create_index(op.f('ix_rwas_code'), 'rwas', ['code'], unique=False)
    op.create_table('route_rwa_association',
    sa.Column('route_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rwa_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['route_id'], ['routes.id'], name=op.f('route_rwa_association_route_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['rwa_id'], ['rwas.id'], name=op.f('route_rwa_association_rwa_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('route_id', 'rwa_id', name=op.f('route_rwa_association_pkey'))
    )
    op.drop_table('route_community_association')
    # ### end Alembic commands ###
