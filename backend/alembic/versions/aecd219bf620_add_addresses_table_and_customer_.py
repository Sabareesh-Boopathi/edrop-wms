"""add_addresses_table_and_customer_address_support

Revision ID: aecd219bf620
Revises: f69d32adfd25
Create Date: 2025-08-23 18:18:40.839664

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'aecd219bf620'
down_revision: Union[str, Sequence[str], None] = 'f69d32adfd25'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create addresses table for individual houses
    op.create_table('addresses',
        sa.Column('id', sa.UUID(), nullable=False),
        sa.Column('street_address', sa.String(length=500), nullable=False),
        sa.Column('area', sa.String(length=255), nullable=True),
        sa.Column('city', sa.String(length=100), nullable=False),
        sa.Column('state', sa.String(length=100), nullable=False),
        sa.Column('pincode', sa.String(length=20), nullable=False),
        sa.Column('country', sa.String(length=100), nullable=False),
        sa.Column('landmark', sa.String(length=255), nullable=True),
        sa.Column('door_number', sa.String(length=50), nullable=True),
        sa.Column('delivery_instructions', sa.Text(), nullable=True),
        sa.Column('latitude', sa.Numeric(precision=10, scale=8), nullable=True),
        sa.Column('longitude', sa.Numeric(precision=11, scale=8), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_addresses_id'), 'addresses', ['id'], unique=False)
    
    # Add address_id foreign key to customers table
    op.add_column('customers', sa.Column('address_id', sa.UUID(), nullable=True))
    op.create_foreign_key('fk_customers_address_id', 'customers', 'addresses', ['address_id'], ['id'])
    
    # Update community_id to be nullable since customers can now have either community_id OR address_id
    op.alter_column('customers', 'community_id', nullable=True)
    
    # Update the unique constraint to be more flexible
    op.drop_constraint('uq_customer_location', 'customers', type_='unique')
    op.create_unique_constraint('uq_customer_community_location', 'customers', ['community_id', 'block', 'flat_number'])
    
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Remove the updated constraints
    op.drop_constraint('uq_customer_community_location', 'customers', type_='unique')
    op.create_unique_constraint('uq_customer_location', 'customers', ['community_id', 'block', 'flat_number'])
    
    # Make community_id non-nullable again
    op.alter_column('customers', 'community_id', nullable=False)
    
    # Remove address foreign key and column
    op.drop_constraint('fk_customers_address_id', 'customers', type_='foreignkey')
    op.drop_column('customers', 'address_id')
    
    # Drop addresses table
    op.drop_index(op.f('ix_addresses_id'), table_name='addresses')
    op.drop_table('addresses')
    
    # ### end Alembic commands ###
