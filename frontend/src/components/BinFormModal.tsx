import React, { useEffect, useMemo, useState } from 'react';
import { Bin, Rack, BinStatus } from '../types';
import { createBin, updateBin, deleteBin } from '../services/rackService';
import './RackDetailModal.css';
import { getWarehouseConfig } from '../services/configService';

interface BinFormModalProps {
  rack: Rack;
  bin: Bin;
  onClose: () => void;
  onChanged: (bin: Bin) => void;
  onDeleted: (binId: string) => void;
}

const statusOptions: BinStatus[] = ['empty', 'occupied', 'reserved', 'blocked', 'maintenance'];

const BinFormModal: React.FC<BinFormModalProps> = ({ rack, bin, onClose, onChanged, onDeleted }) => {
  const [form, setForm] = useState<Bin>({ ...bin });
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [previewCode, setPreviewCode] = useState<string>('Auto-generated');
  const [prefixErr, setPrefixErr] = useState<string | null>(null);

  useEffect(() => {
    let active = true;
    const loadCfgAndBuild = async () => {
      try {
        setPrefixErr(null);
        const cfg = await getWarehouseConfig(rack.warehouse_id);
        const rackPrefix = (cfg.rackPrefix || 'R').toUpperCase();
        const short = (cfg.shortCode || '').toUpperCase();
        const m = /([0-9]+)$/.exec(String(rack.name || ''));
        const rackSeq = (m ? String(parseInt(m[1], 10)) : '1').padStart(3, '0');
        const s = String(Number(form.stack_index) + 1).padStart(3, '0');
        const b = String(Number(form.bin_index) + 1).padStart(3, '0');
        const core = `${rackPrefix}${rackSeq}-S${s}-B${b}`;
        const code = short ? `${short}-${core}` : core;
        if (active) setPreviewCode(code);
        if (!cfg.rackPrefix) setPrefixErr('Using default rack prefix R; set rackPrefix in System Configuration');
      } catch (e) {
        if (active) {
          setPreviewCode('Auto-generated');
          setPrefixErr('Unable to load warehouse configuration');
        }
      }
    };
    loadCfgAndBuild();
    return () => { active = false; };
  // Recompute on index changes
  }, [rack.warehouse_id, rack.name, form.stack_index, form.bin_index]);

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLSelectElement>) => {
    const { name, value } = e.target as { name: keyof Bin; value: string };
    setForm(prev => ({ ...prev, [name]: name === 'quantity' ? Number(value) : name === 'stack_index' || name === 'bin_index' ? Number(value) : value } as Bin));
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      let saved: Bin;
      if (bin.id && !bin.id.includes(':')) {
        const { code, ...rest } = form as any; // code is auto-generated by backend
        saved = await updateBin(bin.id, rest as Partial<Bin>);
      } else {
        saved = await createBin(rack.id, {
          stack_index: form.stack_index,
          bin_index: form.bin_index,
          status: form.status,
          crate_id: form.crate_id,
          product_id: form.product_id,
          store_product_id: form.store_product_id,
          quantity: form.quantity,
        });
      }
      onChanged(saved);
    } catch (e) {
      setError('Failed to save bin');
    } finally {
      setSaving(false);
    }
  };

  const handleDelete = async () => {
    if (!bin.id || bin.id.includes(':')) return onClose();
    try {
      setSaving(true);
      await deleteBin(bin.id);
      onDeleted(bin.id);
    } catch (e) {
      setError('Failed to delete bin');
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="modal-overlay" onClick={onClose}>
      <div className="modal-content" onClick={(e) => e.stopPropagation()}>
        <div className="modal-header">
          <h2>Edit Bin S{form.stack_index + 1} • B{form.bin_index + 1}</h2>
          <button className="close-button" onClick={onClose}>&times;</button>
        </div>

        <div className="modal-body">
          {error && <p className="error-message">{error}</p>}
          <div className="form-grid">
            <div className="form-group">
              <label>Status</label>
              <select name="status" value={form.status} onChange={handleChange}>
                {statusOptions.map(s => (
                  <option key={s} value={s}>{s}</option>
                ))}
              </select>
            </div>
            <div className="form-group">
              <label>Crate ID</label>
              <input name="crate_id" value={form.crate_id || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>Code <span title={prefixErr ? prefixErr : 'Preview of auto-generated code. Final value is assigned on save.'}>ⓘ</span></label>
              <input name="code" value={form.code || previewCode} readOnly />
            </div>
            <div className="form-group">
              <label>Product ID</label>
              <input name="product_id" value={form.product_id || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>Store Product ID</label>
              <input name="store_product_id" value={form.store_product_id || ''} onChange={handleChange} />
            </div>
            <div className="form-group">
              <label>Quantity</label>
              <input name="quantity" type="number" value={form.quantity || 0} onChange={handleChange} />
            </div>
          </div>
        </div>
        <div className="modal-footer">
          {!bin.id.includes(':') && (
            <button className="btn-outline-token" onClick={handleDelete} disabled={saving}>Delete</button>
          )}
          <button className="btn-primary-token" onClick={handleSave} disabled={saving}>{saving ? 'Saving...' : 'Save'}</button>
        </div>
      </div>
    </div>
  );
};

export default BinFormModal;
